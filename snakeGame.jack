
class snakeGame {
   field snakeNode head; 
   field snakeNode tail; 
   field int direction; 
   field int duartionCounter; 
   field int duartion; 
   field int size; 
   field int memAddress;
   field Array appleLocationX;
   field Array appleLocationY;
   field int currentAppleLoc;
   field boolean exit;



   /** Constructs a new Snake Game. */
   constructor snakeGame new() {

      let size = 20;
      let head = snakeNode.new(100, 100,size);
      let tail = snakeNode.new(140, 100, size);
      do head.setNext(tail);
      do tail.setPrev(head);
      
      let currentAppleLoc = 0;
      do appleArrayReset();
      do drawApple();
      
      let direction = 4;  
      let duartion = 100;
      let duartionCounter = 0;
      return this;
   }

   /** initallizes the apple locations array */
   method void appleArrayReset(){
      let appleLocationX = Array.new(9);
      let appleLocationY = Array.new(9);

      let appleLocationX[0] = 10;
      let appleLocationX[1] = 210;
      let appleLocationX[2] = 110;
      let appleLocationX[3] = 70;
      let appleLocationX[4] = 210;
      let appleLocationX[5] = 150;
      let appleLocationX[6] = 30;
      let appleLocationX[7] = 10;
      let appleLocationX[8] = 110;

      let appleLocationY[0] = 10;
      let appleLocationY[1] = 70;
      let appleLocationY[2] = 110;
      let appleLocationY[3] = 10;
      let appleLocationY[4] = 210;
      let appleLocationY[5] = 130;
      let appleLocationY[6] = 90;
      let appleLocationY[7] = 150;
      let appleLocationY[8] = 10;
      return;
   }

   /** Draws an apple */
   method void drawApple(){
      if (currentAppleLoc = 9){
         let currentAppleLoc = 0;
      }
      else{
         let currentAppleLoc = currentAppleLoc + 1;
      }
      do Screen.setColor(true);
      do Screen.drawCircle(appleLocationX[currentAppleLoc], appleLocationY[currentAppleLoc], 10);
       return;
   }

   /** Disposes this game. */
   method void dispose() {
      var snakeNode temp;
      var snakeNode node;
      let node = head;
      while (~(node = tail)){
         let temp = node.getNext();
         do node.dispose();
         let node = temp;
      }
      do tail.dispose();
      do appleLocationX.dispose();
      do appleLocationY.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the snake in the current direction. */
   method void moveSnake() {
      var snakeNode newHead;
      var snakeNode oldTail;
      var snakeNode temp;
      var int xVal;
      var int yVal;

      if (duartionCounter = duartion){
         let duartionCounter = 0;
         // Setting the new node in the appropriate location
      if (direction = 1) { 
         let newHead = snakeNode.new(head.getX(), head.getY()-size,size);
         }
      if (direction = 2) { 
         let newHead = snakeNode.new(head.getX(), head.getY()+size, size) ;
         }
      if (direction = 3) {    
         let newHead = snakeNode.new(head.getX()-size, head.getY(), size) ;
         }
      if (direction = 4) { 
         let newHead = snakeNode.new(head.getX()+size, head.getY(), size);
         }
      
      do newHead.setNext(head);
      do head.setPrev(newHead);
      let head = newHead;
      

      let xVal = newHead.getX();
      let yVal = newHead.getY();

      //check for collision
      let temp = head.getNext();
      while (~( (  (temp.getX() = head.getX()) & (temp.getY() = head.getY()) ) | (temp = tail))){
         let temp = temp.getNext();
      }
      if (~(temp=tail)){
         do gameOver();
      }



      // Checking if the snake encountered the apple
      if (~((xVal = (appleLocationX[currentAppleLoc] - 10)) & (yVal = (appleLocationY[currentAppleLoc] - 10)) )) {
         let oldTail = tail;
         let tail = oldTail.getPrev();
         do oldTail.dispose();
      }
      else{
         do drawApple();
      }   
      }
      else{
      let duartionCounter = duartionCounter +1;
      }
      

      do Sys.wait(1);  // delays the next movement
     
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      
      let exit = false;

      while (~exit) {
         // waits for a key to be pressed
         while (key = 0 & (~(exit))) {
            let key = Keyboard.keyPressed();
            do moveSnake();
         }
         if (key = 81)  { let exit = true; }     // q key
         //if (key = 90)  { do square.decSize(); } // z key
         //if (key = 88)  { do square.incSize(); } // x key
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveSnake();
         }
      }
      do gameOver();
      return;
   }

   method void gameOver() {
      do Output.moveCursor(11,28);
      do Output.printString("GAME OVER");
      let exit = true;
      return;
   }
}



